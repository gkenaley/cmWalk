cmake_minimum_required(VERSION 3.9)
{% if cfg.cmakeToolchainFile %}
# set the toolchain file.
# toolchain file should be set before "project" command.
# the toolchain file can also be set via "cmake -DCMAKE_TOOLCHAIN_FILE=path/to/file".
set(CMAKE_TOOLCHAIN_FILE OEToolchainConfig.cmake)
{% endif %}

project({{ project_name }})
enable_language(C CXX ASM)

include(CTest)
enable_testing()

{% if cfg.cmakeCompilerOptionsFile %}
# load and run the CMake code from the given file to specify project specific options.
include({{ cfg.cmakeCompilerOptionsFile }})
{% endif %}

# Setup for Boost - include paths and library names - libraries are not always needed
find_package(Boost 1.75.0)

if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
    set(Boost_USE_STATIC_LIBS OFF)
    set(Boost_USE_MULTITHREADED ON)
    set(Boost_USE_STATIC_RUNTIME OFF)
    #In the line below, locale is just an example of the libraries that might be required.
    find_package(Boost 1.75.0 COMPONENTS locale)

    # export the executable target through a variable to CMakeLists.txt files in subdirectories.
    # update the dependent sources.
    add_executable(${PROJECT_NAME}
    {%  if files|length > 0 %}
    {% for fname in files %}
        {{ fname }}
    {% endfor %}
    {% else %}
        ""
    {% endif %}
    )

    target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
endif()

if(!Boost_FOUND)
    # export the executable target through a variable to CMakeLists.txt files in subdirectories.
    # update the dependent sources.
    add_executable(${PROJECT_NAME}
    {%  if files|length > 0 %}
    {% for fname in files %}
        {{ fname }}
    {% endfor %}
    {% else %}
        ""
    {% endif %}
    )
endif()

if (LINKER_SCRIPT)
    # If a linker script is defined, make the target depend on it, so
    # the target will be rebuilt when the linker script is changed.
    set_target_properties(${PROJECT_NAME} PROPERTIES LINK_DEPENDS ${LINKER_SCRIPT})
endif()

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)

{% if subdirs|length > 0 %}
# export the name of executable target via a variable to CMakeLists.txt files in subdirectories.
set(CURRENT_EXE_NAME ${PROJECT_NAME})
# load and run the CMake code from subdirectories for current target.
{% for subdir in subdirs %}
include({{ subdir }}/CMakeLists.txt)
{% endfor %}
{% endif %}

